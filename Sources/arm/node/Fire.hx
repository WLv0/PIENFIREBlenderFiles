package arm.node;

@:keep class Fire extends armory.logicnode.LogicTree {

	var functionNodes:Map<String, armory.logicnode.FunctionNode>;

	var functionOutputNodes:Map<String, armory.logicnode.FunctionOutputNode>;

	public function new() {
		super();
		this.functionNodes = new Map();
		this.functionOutputNodes = new Map();
		notifyOnAdd(add);
	}

	override public function add() {
		var _RotateObject = new armory.logicnode.RotateObjectNode(this);
		_RotateObject.property0 = "Angle Axies (Degrees)";
		var _Merge = new armory.logicnode.MergeNode(this);
		_Merge.property0 = "once_per_input";
		var _Keyboard = new armory.logicnode.MergedKeyboardNode(this);
		_Keyboard.property0 = "started";
		_Keyboard.property1 = "space";
		_Keyboard.addOutputs([_Merge]);
		_Keyboard.addOutputs([new armory.logicnode.BooleanNode(this, false)]);
		_Merge.addInput(_Keyboard, 0);
		var _OnSwipe = new armory.logicnode.OnSwipeNode(this);
		_OnSwipe.addInput(new armory.logicnode.FloatNode(this, 0.15000000596046448), 0);
		_OnSwipe.addInput(new armory.logicnode.IntegerNode(this, 100), 0);
		_OnSwipe.addOutputs([_Merge]);
		_OnSwipe.addOutputs([new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0)]);
		_OnSwipe.addOutputs([new armory.logicnode.IntegerNode(this, 0)]);
		_OnSwipe.addOutputs([new armory.logicnode.IntegerNode(this, 0)]);
		_Merge.addInput(_OnSwipe, 0);
		_Merge.addOutputs([_RotateObject]);
		_Merge.addOutputs([new armory.logicnode.IntegerNode(this, 0)]);
		_RotateObject.addInput(_Merge, 0);
		_RotateObject.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_RotateObject.addInput(new armory.logicnode.VectorNode(this, 1.0, 0.0, 0.0), 0);
		_RotateObject.addInput(new armory.logicnode.FloatNode(this, 5.0), 0);
		_RotateObject.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetObjectProperty = new armory.logicnode.SetPropertyNode(this);
		var _Merge_001 = new armory.logicnode.MergeNode(this);
		_Merge_001.property0 = "once_per_input";
		var _Mouse = new armory.logicnode.MergedMouseNode(this);
		_Mouse.property0 = "started";
		_Mouse.property1 = "left";
		_Mouse.addOutputs([_Merge_001]);
		_Mouse.addOutputs([new armory.logicnode.BooleanNode(this, false)]);
		_Merge_001.addInput(_Mouse, 0);
		var _OnTapScreen = new armory.logicnode.OnTapScreen(this);
		_OnTapScreen.addInput(new armory.logicnode.FloatNode(this, 0.30000001192092896), 0);
		_OnTapScreen.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_OnTapScreen.addInput(new armory.logicnode.IntegerNode(this, 2), 0);
		_OnTapScreen.addOutputs([_Merge_001]);
		_OnTapScreen.addOutputs([new armory.logicnode.NullNode(this)]);
		_OnTapScreen.addOutputs([new armory.logicnode.NullNode(this)]);
		_OnTapScreen.addOutputs([new armory.logicnode.IntegerNode(this, 0)]);
		_OnTapScreen.addOutputs([new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0)]);
		_Merge_001.addInput(_OnTapScreen, 0);
		var _SwitchOutput = new armory.logicnode.SwitchNode(this);
		_SwitchOutput.addInput(_Merge_001, 0);
		var _GetObjectProperty_003 = new armory.logicnode.GetPropertyNode(this);
		_GetObjectProperty_003.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_GetObjectProperty_003.addInput(new armory.logicnode.StringNode(this, "Fired"), 0);
		_GetObjectProperty_003.addOutputs([_SwitchOutput]);
		_GetObjectProperty_003.addOutputs([new armory.logicnode.StringNode(this, "")]);
		_SwitchOutput.addInput(_GetObjectProperty_003, 0);
		var _Integer = new armory.logicnode.IntegerNode(this);
		_Integer.addInput(new armory.logicnode.IntegerNode(this, 1), 0);
		_Integer.addOutputs([_SwitchOutput]);
		_SwitchOutput.addInput(_Integer, 0);
		var _Timer = new armory.logicnode.TimerNode(this);
		_Timer.addInput(_SwitchOutput, 0);
		_Timer.addInput(new armory.logicnode.NullNode(this), 0);
		_Timer.addInput(new armory.logicnode.NullNode(this), 0);
		_Timer.addInput(new armory.logicnode.FloatNode(this, 10.0), 0);
		_Timer.addInput(new armory.logicnode.IntegerNode(this, 1), 0);
		_Timer.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetRBGravityEnabled_001 = new armory.logicnode.SetGravityEnabledNode(this);
		_SetRBGravityEnabled_001.addInput(_Timer, 1);
		_SetRBGravityEnabled_001.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_SetRBGravityEnabled_001.addInput(new armory.logicnode.BooleanNode(this, true), 0);
		var _ApplyForce = new armory.logicnode.ApplyForceNode(this);
		_ApplyForce.addInput(_SetRBGravityEnabled_001, 0);
		_ApplyForce.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		var _Vector = new armory.logicnode.VectorNode(this);
		_Vector.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		var _Math_001 = new armory.logicnode.MathNode(this);
		_Math_001.property0 = "Multiply";
		_Math_001.property1 = "false";
		var _GetObjectProperty_002 = new armory.logicnode.GetPropertyNode(this);
		_GetObjectProperty_002.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_GetObjectProperty_002.addInput(new armory.logicnode.StringNode(this, "Charge"), 0);
		_GetObjectProperty_002.addOutputs([_Math_001]);
		_GetObjectProperty_002.addOutputs([new armory.logicnode.StringNode(this, "")]);
		_Math_001.addInput(_GetObjectProperty_002, 0);
		_Math_001.addInput(new armory.logicnode.FloatNode(this, 5.0), 0);
		_Math_001.addOutputs([_Vector]);
		_Vector.addInput(_Math_001, 0);
		_Vector.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_Vector.addOutputs([_ApplyForce]);
		_ApplyForce.addInput(_Vector, 0);
		_ApplyForce.addInput(new armory.logicnode.BooleanNode(this, true), 0);
		var _SetObjectProperty_002 = new armory.logicnode.SetPropertyNode(this);
		_SetObjectProperty_002.addInput(_ApplyForce, 0);
		_SetObjectProperty_002.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_SetObjectProperty_002.addInput(new armory.logicnode.StringNode(this, "Fired"), 0);
		var _Math_002 = new armory.logicnode.MathNode(this);
		_Math_002.property0 = "Add";
		_Math_002.property1 = "false";
		var _GetObjectProperty_004 = new armory.logicnode.GetPropertyNode(this);
		_GetObjectProperty_004.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_GetObjectProperty_004.addInput(new armory.logicnode.StringNode(this, "Fired"), 0);
		_GetObjectProperty_004.addOutputs([_Math_002]);
		_GetObjectProperty_004.addOutputs([new armory.logicnode.StringNode(this, "")]);
		_Math_002.addInput(_GetObjectProperty_004, 0);
		var _Integer_001 = new armory.logicnode.IntegerNode(this);
		_Integer_001.addInput(new armory.logicnode.IntegerNode(this, 1), 0);
		_Integer_001.addOutputs([_Math_002]);
		_Math_002.addInput(_Integer_001, 0);
		_Math_002.addOutputs([_SetObjectProperty_002]);
		_SetObjectProperty_002.addInput(_Math_002, 0);
		var _Timer_001 = new armory.logicnode.TimerNode(this);
		_Timer_001.addInput(_SetObjectProperty_002, 0);
		_Timer_001.addInput(new armory.logicnode.NullNode(this), 0);
		var _OnContact = new armory.logicnode.OnContactNode(this);
		_OnContact.property0 = "begin";
		_OnContact.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_OnContact.addInput(new armory.logicnode.ObjectNode(this, "Terra"), 0);
		_OnContact.addOutputs([_Timer_001]);
		_Timer_001.addInput(_OnContact, 0);
		_Timer_001.addInput(new armory.logicnode.FloatNode(this, 0.05000000074505806), 0);
		_Timer_001.addInput(new armory.logicnode.IntegerNode(this, 0), 0);
		var _SetCanvasText = new armory.logicnode.CanvasSetTextNode(this);
		_SetCanvasText.addInput(_Timer_001, 0);
		_SetCanvasText.addInput(new armory.logicnode.StringNode(this, "Distance"), 0);
		var _Math_003 = new armory.logicnode.MathNode(this);
		_Math_003.property0 = "Round";
		_Math_003.property1 = "false";
		var _GetDistance = new armory.logicnode.GetDistanceNode(this);
		_GetDistance.addInput(new armory.logicnode.ObjectNode(this, "Start"), 0);
		_GetDistance.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_GetDistance.addOutputs([_Math_003]);
		_Math_003.addInput(_GetDistance, 0);
		_Math_003.addOutputs([_SetCanvasText]);
		_SetCanvasText.addInput(_Math_003, 0);
		_SetCanvasText.addOutputs([new armory.logicnode.NullNode(this)]);
		_Timer_001.addOutputs([_SetCanvasText]);
		_Timer_001.addOutputs([new armory.logicnode.NullNode(this)]);
		_Timer_001.addOutputs([new armory.logicnode.BooleanNode(this, false)]);
		_Timer_001.addOutputs([new armory.logicnode.IntegerNode(this, 0)]);
		_Timer_001.addOutputs([new armory.logicnode.IntegerNode(this, 0)]);
		_Timer_001.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_Timer_001.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_SetObjectProperty_002.addOutputs([_Timer_001]);
		_ApplyForce.addOutputs([_SetObjectProperty_002]);
		_SetRBGravityEnabled_001.addOutputs([_ApplyForce]);
		_Timer.addOutputs([_SetRBGravityEnabled_001]);
		_Timer.addOutputs([new armory.logicnode.BooleanNode(this, false)]);
		_Timer.addOutputs([new armory.logicnode.IntegerNode(this, 0)]);
		var _SetCanvasProgressBar = new armory.logicnode.CanvasSetPBNode(this);
		var _OnUpdate_001 = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate_001.property0 = "Update";
		_OnUpdate_001.addOutputs([_SetCanvasProgressBar]);
		_SetCanvasProgressBar.addInput(_OnUpdate_001, 0);
		_SetCanvasProgressBar.addInput(new armory.logicnode.StringNode(this, "TimePB"), 0);
		_SetCanvasProgressBar.addInput(_Timer, 4);
		_SetCanvasProgressBar.addInput(new armory.logicnode.IntegerNode(this, 10), 0);
		_SetCanvasProgressBar.addOutputs([new armory.logicnode.NullNode(this)]);
		_Timer.addOutputs([_SetCanvasProgressBar]);
		_Timer.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_Timer.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_SwitchOutput.addOutputs([_Timer]);
		_SwitchOutput.addOutputs([new armory.logicnode.NullNode(this)]);
		_Merge_001.addOutputs([_SetObjectProperty, _SwitchOutput]);
		_Merge_001.addOutputs([new armory.logicnode.IntegerNode(this, 0)]);
		_SetObjectProperty.addInput(_Merge_001, 0);
		_SetObjectProperty.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_SetObjectProperty.addInput(new armory.logicnode.StringNode(this, "Charge"), 0);
		var _Math = new armory.logicnode.MathNode(this);
		_Math.property0 = "Add";
		_Math.property1 = "false";
		var _GetObjectProperty = new armory.logicnode.GetPropertyNode(this);
		_GetObjectProperty.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_GetObjectProperty.addInput(new armory.logicnode.StringNode(this, "Charge"), 0);
		_GetObjectProperty.addOutputs([_Math]);
		_GetObjectProperty.addOutputs([new armory.logicnode.StringNode(this, "")]);
		_Math.addInput(_GetObjectProperty, 0);
		_Math.addInput(new armory.logicnode.FloatNode(this, 1.0), 0);
		_Math.addOutputs([_SetObjectProperty]);
		_SetObjectProperty.addInput(_Math, 0);
		_SetObjectProperty.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetObjectLocation = new armory.logicnode.SetLocationNode(this);
		var _OnUpdate = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate.property0 = "Update";
		_OnUpdate.addOutputs([_SetObjectLocation]);
		_SetObjectLocation.addInput(_OnUpdate, 0);
		_SetObjectLocation.addInput(new armory.logicnode.ObjectNode(this, "Pientrack"), 0);
		var _GetObjectLocation = new armory.logicnode.GetLocationNode(this);
		_GetObjectLocation.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_GetObjectLocation.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_GetObjectLocation.addOutputs([_SetObjectLocation]);
		_SetObjectLocation.addInput(_GetObjectLocation, 0);
		_SetObjectLocation.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_SetObjectLocation.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetCanvasText_001 = new armory.logicnode.CanvasSetTextNode(this);
		var _OnUpdate_002 = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate_002.property0 = "Update";
		_OnUpdate_002.addOutputs([_SetCanvasText_001]);
		_SetCanvasText_001.addInput(_OnUpdate_002, 0);
		_SetCanvasText_001.addInput(new armory.logicnode.StringNode(this, "Speed"), 0);
		var _Math_004 = new armory.logicnode.MathNode(this);
		_Math_004.property0 = "Round";
		_Math_004.property1 = "false";
		var _SeparateXYZ = new armory.logicnode.SeparateVectorNode(this);
		var _GetRBVelocity = new armory.logicnode.GetVelocityNode(this);
		_GetRBVelocity.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_GetRBVelocity.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_GetRBVelocity.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_GetRBVelocity.addOutputs([_SeparateXYZ]);
		_GetRBVelocity.addOutputs([new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0)]);
		_SeparateXYZ.addInput(_GetRBVelocity, 0);
		_SeparateXYZ.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_SeparateXYZ.addOutputs([_Math_004]);
		_SeparateXYZ.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_Math_004.addInput(_SeparateXYZ, 1);
		_Math_004.addOutputs([_SetCanvasText_001]);
		_SetCanvasText_001.addInput(_Math_004, 0);
		_SetCanvasText_001.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetRBGravityEnabled = new armory.logicnode.SetGravityEnabledNode(this);
		var _OnInit = new armory.logicnode.OnInitNode(this);
		_OnInit.addOutputs([_SetRBGravityEnabled]);
		_SetRBGravityEnabled.addInput(_OnInit, 0);
		_SetRBGravityEnabled.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_SetRBGravityEnabled.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_SetRBGravityEnabled.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetObjectProperty_003 = new armory.logicnode.SetPropertyNode(this);
		var _SetObjectProperty_001 = new armory.logicnode.SetPropertyNode(this);
		var _SetCanvasText_002 = new armory.logicnode.CanvasSetTextNode(this);
		var _SetRBGravityEnabled_002 = new armory.logicnode.SetGravityEnabledNode(this);
		var _SetRBVelocity = new armory.logicnode.SetVelocityNode(this);
		var _SetObjectTransform = new armory.logicnode.SetTransformNode(this);
		var _OnCanvasElement = new armory.logicnode.OnCanvasElementNode(this);
		_OnCanvasElement.property0 = "click";
		_OnCanvasElement.property1 = "started";
		_OnCanvasElement.property2 = "left";
		_OnCanvasElement.addInput(new armory.logicnode.StringNode(this, "Reset"), 0);
		_OnCanvasElement.addOutputs([_SetObjectTransform]);
		_SetObjectTransform.addInput(_OnCanvasElement, 0);
		_SetObjectTransform.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		var _GetObjectTransform = new armory.logicnode.GetTransformNode(this);
		_GetObjectTransform.addInput(new armory.logicnode.ObjectNode(this, "Start"), 0);
		_GetObjectTransform.addOutputs([_SetObjectTransform]);
		_SetObjectTransform.addInput(_GetObjectTransform, 0);
		_SetObjectTransform.addOutputs([_SetRBVelocity]);
		_SetRBVelocity.addInput(_SetObjectTransform, 0);
		_SetRBVelocity.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_SetRBVelocity.addInput(new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0), 0);
		_SetRBVelocity.addInput(new armory.logicnode.VectorNode(this, 1.0, 1.0, 1.0), 0);
		_SetRBVelocity.addInput(new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0), 0);
		_SetRBVelocity.addInput(new armory.logicnode.VectorNode(this, 1.0, 1.0, 1.0), 0);
		_SetRBVelocity.addOutputs([_SetRBGravityEnabled_002]);
		_SetRBGravityEnabled_002.addInput(_SetRBVelocity, 0);
		_SetRBGravityEnabled_002.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_SetRBGravityEnabled_002.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_SetRBGravityEnabled_002.addOutputs([_SetCanvasText_002]);
		_SetCanvasText_002.addInput(_SetRBGravityEnabled_002, 0);
		_SetCanvasText_002.addInput(new armory.logicnode.StringNode(this, "Distance"), 0);
		var _Integer_002 = new armory.logicnode.IntegerNode(this);
		_Integer_002.addInput(new armory.logicnode.IntegerNode(this, 0), 0);
		_Integer_002.addOutputs([_SetCanvasText_002]);
		_SetCanvasText_002.addInput(_Integer_002, 0);
		_SetCanvasText_002.addOutputs([_SetObjectProperty_001]);
		_SetObjectProperty_001.addInput(_SetCanvasText_002, 0);
		_SetObjectProperty_001.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_SetObjectProperty_001.addInput(new armory.logicnode.StringNode(this, "Fired"), 0);
		var _Integer_003 = new armory.logicnode.IntegerNode(this);
		_Integer_003.addInput(new armory.logicnode.IntegerNode(this, 0), 0);
		_Integer_003.addOutputs([_SetObjectProperty_001]);
		_SetObjectProperty_001.addInput(_Integer_003, 0);
		_SetObjectProperty_001.addOutputs([_SetObjectProperty_003]);
		_SetObjectProperty_003.addInput(_SetObjectProperty_001, 0);
		_SetObjectProperty_003.addInput(new armory.logicnode.ObjectNode(this, "Pien"), 0);
		_SetObjectProperty_003.addInput(new armory.logicnode.StringNode(this, "Charge"), 0);
		var _Integer_004 = new armory.logicnode.IntegerNode(this);
		_Integer_004.addInput(new armory.logicnode.IntegerNode(this, 0), 0);
		_Integer_004.addOutputs([_SetObjectProperty_003]);
		_SetObjectProperty_003.addInput(_Integer_004, 0);
		_SetObjectProperty_003.addOutputs([new armory.logicnode.NullNode(this)]);
	}
}